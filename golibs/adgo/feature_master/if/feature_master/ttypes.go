// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package feature_master

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/algo-data-platform/predictor/golibs/ads_common_go/thirdparty/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var GoUnusedProtection__ int;

type FeatureType int64
const (
  FeatureType_STRING_LIST FeatureType = 1
  FeatureType_FLOAT_LIST FeatureType = 2
  FeatureType_INT64_LIST FeatureType = 3
)

var FeatureTypeToName = map[FeatureType]string {
  FeatureType_STRING_LIST: "STRING_LIST",
  FeatureType_FLOAT_LIST: "FLOAT_LIST",
  FeatureType_INT64_LIST: "INT64_LIST",
}

var FeatureTypeToValue = map[string]FeatureType {
  "STRING_LIST": FeatureType_STRING_LIST,
  "FLOAT_LIST": FeatureType_FLOAT_LIST,
  "INT64_LIST": FeatureType_INT64_LIST,
}

func (p FeatureType) String() string {
  if v, ok := FeatureTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func FeatureTypeFromString(s string) (FeatureType, error) {
  if v, ok := FeatureTypeToValue[s]; ok {
    return v, nil
  }
  return FeatureType(0), fmt.Errorf("not a valid FeatureType string")
}

func FeatureTypePtr(v FeatureType) *FeatureType { return &v }

// Attributes:
//  - FeatureName
//  - FeatureType
//  - StringValues
//  - FloatValues
//  - Int64Values
type Feature struct {
  FeatureName string `thrift:"feature_name,1,required" db:"feature_name" json:"feature_name"`
  FeatureType FeatureType `thrift:"feature_type,2,required" db:"feature_type" json:"feature_type"`
  StringValues []string `thrift:"string_values,3,required" db:"string_values" json:"string_values"`
  FloatValues []float64 `thrift:"float_values,4,required" db:"float_values" json:"float_values"`
  Int64Values []int64 `thrift:"int64_values,5,required" db:"int64_values" json:"int64_values"`
}

func NewFeature() *Feature {
  return &Feature{}
}


func (p *Feature) GetFeatureName() string {
  return p.FeatureName
}

func (p *Feature) GetFeatureType() FeatureType {
  return p.FeatureType
}

func (p *Feature) GetStringValues() []string {
  return p.StringValues
}

func (p *Feature) GetFloatValues() []float64 {
  return p.FloatValues
}

func (p *Feature) GetInt64Values() []int64 {
  return p.Int64Values
}
func (p *Feature) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFeatureName bool = false;
  var issetFeatureType bool = false;
  var issetStringValues bool = false;
  var issetFloatValues bool = false;
  var issetInt64Values bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFeatureName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetFeatureType = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetStringValues = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetFloatValues = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetInt64Values = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFeatureName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FeatureName is not set"));
  }
  if !issetFeatureType{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FeatureType is not set"));
  }
  if !issetStringValues{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StringValues is not set"));
  }
  if !issetFloatValues{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FloatValues is not set"));
  }
  if !issetInt64Values{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Int64Values is not set"));
  }
  return nil
}

func (p *Feature)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FeatureName = v
}
  return nil
}

func (p *Feature)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := FeatureType(v)
  p.FeatureType = temp
}
  return nil
}

func (p *Feature)  ReadField3(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StringValues =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.StringValues = append(p.StringValues, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Feature)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.FloatValues =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.FloatValues = append(p.FloatValues, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Feature)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Int64Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Int64Values = append(p.Int64Values, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Feature) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Feature"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Feature) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("feature_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:feature_name: ", p), err) }
  if err := oprot.WriteString(string(p.FeatureName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.feature_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:feature_name: ", p), err) }
  return err
}

func (p *Feature) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("feature_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:feature_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.FeatureType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.feature_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:feature_type: ", p), err) }
  return err
}

func (p *Feature) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("string_values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:string_values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.StringValues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StringValues {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:string_values: ", p), err) }
  return err
}

func (p *Feature) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("float_values", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:float_values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.FloatValues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FloatValues {
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:float_values: ", p), err) }
  return err
}

func (p *Feature) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("int64_values", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:int64_values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.Int64Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Int64Values {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:int64_values: ", p), err) }
  return err
}

func (p *Feature) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Feature(%+v)", *p)
}

// Attributes:
//  - Features
type Features struct {
  Features []*Feature `thrift:"features,1,required" db:"features" json:"features"`
}

func NewFeatures() *Features {
  return &Features{}
}


func (p *Features) GetFeatures() []*Feature {
  return p.Features
}
func (p *Features) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFeatures bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFeatures = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFeatures{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Features is not set"));
  }
  return nil
}

func (p *Features)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Feature, 0, size)
  p.Features =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := NewFeature()
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.Features = append(p.Features, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Features) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Features"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Features) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("features", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:features: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Features)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Features {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:features: ", p), err) }
  return err
}

func (p *Features) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Features(%+v)", *p)
}

// Attributes:
//  - Features
//  - Labels
//  - Timestamp
type ExampleTrain struct {
  Features *Features `thrift:"features,1,required" db:"features" json:"features"`
  Labels *Features `thrift:"labels,2,required" db:"labels" json:"labels"`
  Timestamp int64 `thrift:"timestamp,3,required" db:"timestamp" json:"timestamp"`
}

func NewExampleTrain() *ExampleTrain {
  return &ExampleTrain{}
}

var ExampleTrain_Features_DEFAULT *Features
func (p *ExampleTrain) GetFeatures() *Features {
  if !p.IsSetFeatures() {
    return ExampleTrain_Features_DEFAULT
  }
return p.Features
}
var ExampleTrain_Labels_DEFAULT *Features
func (p *ExampleTrain) GetLabels() *Features {
  if !p.IsSetLabels() {
    return ExampleTrain_Labels_DEFAULT
  }
return p.Labels
}

func (p *ExampleTrain) GetTimestamp() int64 {
  return p.Timestamp
}
func (p *ExampleTrain) IsSetFeatures() bool {
  return p.Features != nil
}

func (p *ExampleTrain) IsSetLabels() bool {
  return p.Labels != nil
}

func (p *ExampleTrain) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFeatures bool = false;
  var issetLabels bool = false;
  var issetTimestamp bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFeatures = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetLabels = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetTimestamp = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFeatures{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Features is not set"));
  }
  if !issetLabels{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Labels is not set"));
  }
  if !issetTimestamp{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamp is not set"));
  }
  return nil
}

func (p *ExampleTrain)  ReadField1(iprot thrift.Protocol) error {
  p.Features = NewFeatures()
  if err := p.Features.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Features), err)
  }
  return nil
}

func (p *ExampleTrain)  ReadField2(iprot thrift.Protocol) error {
  p.Labels = NewFeatures()
  if err := p.Labels.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Labels), err)
  }
  return nil
}

func (p *ExampleTrain)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *ExampleTrain) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExampleTrain"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleTrain) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("features", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:features: ", p), err) }
  if err := p.Features.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Features), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:features: ", p), err) }
  return err
}

func (p *ExampleTrain) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("labels", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:labels: ", p), err) }
  if err := p.Labels.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Labels), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:labels: ", p), err) }
  return err
}

func (p *ExampleTrain) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  return err
}

func (p *ExampleTrain) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleTrain(%+v)", *p)
}

// Attributes:
//  - Features
type ExamplePredict struct {
  Features *Features `thrift:"features,1,required" db:"features" json:"features"`
}

func NewExamplePredict() *ExamplePredict {
  return &ExamplePredict{}
}

var ExamplePredict_Features_DEFAULT *Features
func (p *ExamplePredict) GetFeatures() *Features {
  if !p.IsSetFeatures() {
    return ExamplePredict_Features_DEFAULT
  }
return p.Features
}
func (p *ExamplePredict) IsSetFeatures() bool {
  return p.Features != nil
}

func (p *ExamplePredict) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFeatures bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFeatures = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFeatures{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Features is not set"));
  }
  return nil
}

func (p *ExamplePredict)  ReadField1(iprot thrift.Protocol) error {
  p.Features = NewFeatures()
  if err := p.Features.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Features), err)
  }
  return nil
}

func (p *ExamplePredict) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExamplePredict"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExamplePredict) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("features", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:features: ", p), err) }
  if err := p.Features.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Features), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:features: ", p), err) }
  return err
}

func (p *ExamplePredict) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExamplePredict(%+v)", *p)
}

// Attributes:
//  - Preds
type PredictResults struct {
  Preds map[string]float64 `thrift:"preds,1,required" db:"preds" json:"preds"`
}

func NewPredictResults() *PredictResults {
  return &PredictResults{}
}


func (p *PredictResults) GetPreds() map[string]float64 {
  return p.Preds
}
func (p *PredictResults) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPreds bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetPreds = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPreds{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Preds is not set"));
  }
  return nil
}

func (p *PredictResults)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]float64, size)
  p.Preds =  tMap
  for i := 0; i < size; i ++ {
var _key4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key4 = v
}
var _val5 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val5 = v
}
    p.Preds[_key4] = _val5
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PredictResults) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PredictResults"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictResults) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("preds", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:preds: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.DOUBLE, len(p.Preds)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Preds {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:preds: ", p), err) }
  return err
}

func (p *PredictResults) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictResults(%+v)", *p)
}

// Attributes:
//  - JoinKey
//  - Features
//  - Results
type ExamplePredictSnapshot struct {
  JoinKey string `thrift:"join_key,1,required" db:"join_key" json:"join_key"`
  Features *Features `thrift:"features,2,required" db:"features" json:"features"`
  Results *PredictResults `thrift:"results,3,required" db:"results" json:"results"`
}

func NewExamplePredictSnapshot() *ExamplePredictSnapshot {
  return &ExamplePredictSnapshot{}
}


func (p *ExamplePredictSnapshot) GetJoinKey() string {
  return p.JoinKey
}
var ExamplePredictSnapshot_Features_DEFAULT *Features
func (p *ExamplePredictSnapshot) GetFeatures() *Features {
  if !p.IsSetFeatures() {
    return ExamplePredictSnapshot_Features_DEFAULT
  }
return p.Features
}
var ExamplePredictSnapshot_Results_DEFAULT *PredictResults
func (p *ExamplePredictSnapshot) GetResults() *PredictResults {
  if !p.IsSetResults() {
    return ExamplePredictSnapshot_Results_DEFAULT
  }
return p.Results
}
func (p *ExamplePredictSnapshot) IsSetFeatures() bool {
  return p.Features != nil
}

func (p *ExamplePredictSnapshot) IsSetResults() bool {
  return p.Results != nil
}

func (p *ExamplePredictSnapshot) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetJoinKey bool = false;
  var issetFeatures bool = false;
  var issetResults bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetJoinKey = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetFeatures = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetResults = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetJoinKey{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field JoinKey is not set"));
  }
  if !issetFeatures{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Features is not set"));
  }
  if !issetResults{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Results is not set"));
  }
  return nil
}

func (p *ExamplePredictSnapshot)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JoinKey = v
}
  return nil
}

func (p *ExamplePredictSnapshot)  ReadField2(iprot thrift.Protocol) error {
  p.Features = NewFeatures()
  if err := p.Features.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Features), err)
  }
  return nil
}

func (p *ExamplePredictSnapshot)  ReadField3(iprot thrift.Protocol) error {
  p.Results = NewPredictResults()
  if err := p.Results.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Results), err)
  }
  return nil
}

func (p *ExamplePredictSnapshot) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExamplePredictSnapshot"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExamplePredictSnapshot) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("join_key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:join_key: ", p), err) }
  if err := oprot.WriteString(string(p.JoinKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.join_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:join_key: ", p), err) }
  return err
}

func (p *ExamplePredictSnapshot) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("features", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:features: ", p), err) }
  if err := p.Features.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Features), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:features: ", p), err) }
  return err
}

func (p *ExamplePredictSnapshot) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("results", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:results: ", p), err) }
  if err := p.Results.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Results), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:results: ", p), err) }
  return err
}

func (p *ExamplePredictSnapshot) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExamplePredictSnapshot(%+v)", *p)
}

