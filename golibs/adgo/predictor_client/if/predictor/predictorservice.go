// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package predictor

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/algo-data-platform/predictor/golibs/ads_common_go/thirdparty/thrift"
	feature_master0 "github.com/algo-data-platform/predictor/golibs/adgo/feature_master/if/feature_master"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = feature_master0.GoUnusedProtection__
type PredictorService interface {
  // Parameters:
  //  - Reqs
  Predict(reqs *PredictRequests) (r *PredictResponses, err error)
  // Parameters:
  //  - MultiReq
  MultiPredict(multi_req *MultiPredictRequest) (r *MultiPredictResponse, err error)
  // Parameters:
  //  - Reqs
  CalculateVector(reqs *CalculateVectorRequests) (r *CalculateVectorResponses, err error)
  // Parameters:
  //  - Reqs
  CalculateBatchVector(reqs *CalculateBatchVectorRequests) (r *CalculateBatchVectorResponses, err error)
}

type PredictorServiceClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
}

func (client *PredictorServiceClient) Close() error {
  return client.Transport.Close()
}

func NewPredictorServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *PredictorServiceClient {
  return &PredictorServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewPredictorServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *PredictorServiceClient {
  return &PredictorServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Reqs
func (p *PredictorServiceClient) Predict(reqs *PredictRequests) (r *PredictResponses, err error) {
  if err = p.sendPredict(reqs); err != nil { return }
  return p.recvPredict()
}

func (p *PredictorServiceClient) sendPredict(reqs *PredictRequests)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("predict", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PredictorServicePredictArgs{
  Reqs : reqs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PredictorServiceClient) recvPredict() (value *PredictResponses, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "predict" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "predict failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "predict failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error38 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error39 error
    error39, err = error38.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error39
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "predict failed: invalid message type")
    return
  }
  result := PredictorServicePredictResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - MultiReq
func (p *PredictorServiceClient) MultiPredict(multi_req *MultiPredictRequest) (r *MultiPredictResponse, err error) {
  if err = p.sendMultiPredict(multi_req); err != nil { return }
  return p.recvMultiPredict()
}

func (p *PredictorServiceClient) sendMultiPredict(multi_req *MultiPredictRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiPredict", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PredictorServiceMultiPredictArgs{
  MultiReq : multi_req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PredictorServiceClient) recvMultiPredict() (value *MultiPredictResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiPredict" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiPredict failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiPredict failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error40 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error41 error
    error41, err = error40.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error41
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiPredict failed: invalid message type")
    return
  }
  result := PredictorServiceMultiPredictResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Reqs
func (p *PredictorServiceClient) CalculateVector(reqs *CalculateVectorRequests) (r *CalculateVectorResponses, err error) {
  if err = p.sendCalculateVector(reqs); err != nil { return }
  return p.recvCalculateVector()
}

func (p *PredictorServiceClient) sendCalculateVector(reqs *CalculateVectorRequests)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("calculateVector", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PredictorServiceCalculateVectorArgs{
  Reqs : reqs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PredictorServiceClient) recvCalculateVector() (value *CalculateVectorResponses, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "calculateVector" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "calculateVector failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "calculateVector failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error42 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error43 error
    error43, err = error42.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error43
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "calculateVector failed: invalid message type")
    return
  }
  result := PredictorServiceCalculateVectorResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Reqs
func (p *PredictorServiceClient) CalculateBatchVector(reqs *CalculateBatchVectorRequests) (r *CalculateBatchVectorResponses, err error) {
  if err = p.sendCalculateBatchVector(reqs); err != nil { return }
  return p.recvCalculateBatchVector()
}

func (p *PredictorServiceClient) sendCalculateBatchVector(reqs *CalculateBatchVectorRequests)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("calculateBatchVector", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PredictorServiceCalculateBatchVectorArgs{
  Reqs : reqs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PredictorServiceClient) recvCalculateBatchVector() (value *CalculateBatchVectorResponses, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "calculateBatchVector" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "calculateBatchVector failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "calculateBatchVector failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error44 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error45 error
    error45, err = error44.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error45
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "calculateBatchVector failed: invalid message type")
    return
  }
  result := PredictorServiceCalculateBatchVectorResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}


type PredictorServiceThreadsafeClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
  Mu sync.Mutex
}

func NewPredictorServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *PredictorServiceThreadsafeClient {
  return &PredictorServiceThreadsafeClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewPredictorServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *PredictorServiceThreadsafeClient {
  return &PredictorServiceThreadsafeClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *PredictorServiceThreadsafeClient) Threadsafe() {}

// Parameters:
//  - Reqs
func (p *PredictorServiceThreadsafeClient) Predict(reqs *PredictRequests) (r *PredictResponses, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendPredict(reqs); err != nil { return }
  return p.recvPredict()
}

func (p *PredictorServiceThreadsafeClient) sendPredict(reqs *PredictRequests)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("predict", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PredictorServicePredictArgs{
  Reqs : reqs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PredictorServiceThreadsafeClient) recvPredict() (value *PredictResponses, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "predict" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "predict failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "predict failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error46 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error47 error
    error47, err = error46.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error47
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "predict failed: invalid message type")
    return
  }
  result := PredictorServicePredictResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - MultiReq
func (p *PredictorServiceThreadsafeClient) MultiPredict(multi_req *MultiPredictRequest) (r *MultiPredictResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendMultiPredict(multi_req); err != nil { return }
  return p.recvMultiPredict()
}

func (p *PredictorServiceThreadsafeClient) sendMultiPredict(multi_req *MultiPredictRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("multiPredict", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PredictorServiceMultiPredictArgs{
  MultiReq : multi_req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PredictorServiceThreadsafeClient) recvMultiPredict() (value *MultiPredictResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "multiPredict" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "multiPredict failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "multiPredict failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error48 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error49 error
    error49, err = error48.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error49
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "multiPredict failed: invalid message type")
    return
  }
  result := PredictorServiceMultiPredictResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Reqs
func (p *PredictorServiceThreadsafeClient) CalculateVector(reqs *CalculateVectorRequests) (r *CalculateVectorResponses, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCalculateVector(reqs); err != nil { return }
  return p.recvCalculateVector()
}

func (p *PredictorServiceThreadsafeClient) sendCalculateVector(reqs *CalculateVectorRequests)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("calculateVector", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PredictorServiceCalculateVectorArgs{
  Reqs : reqs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PredictorServiceThreadsafeClient) recvCalculateVector() (value *CalculateVectorResponses, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "calculateVector" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "calculateVector failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "calculateVector failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error50 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error51 error
    error51, err = error50.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error51
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "calculateVector failed: invalid message type")
    return
  }
  result := PredictorServiceCalculateVectorResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Reqs
func (p *PredictorServiceThreadsafeClient) CalculateBatchVector(reqs *CalculateBatchVectorRequests) (r *CalculateBatchVectorResponses, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendCalculateBatchVector(reqs); err != nil { return }
  return p.recvCalculateBatchVector()
}

func (p *PredictorServiceThreadsafeClient) sendCalculateBatchVector(reqs *CalculateBatchVectorRequests)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("calculateBatchVector", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PredictorServiceCalculateBatchVectorArgs{
  Reqs : reqs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PredictorServiceThreadsafeClient) recvCalculateBatchVector() (value *CalculateBatchVectorResponses, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "calculateBatchVector" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "calculateBatchVector failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "calculateBatchVector failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error52 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error53 error
    error53, err = error52.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error53
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "calculateBatchVector failed: invalid message type")
    return
  }
  result := PredictorServiceCalculateBatchVectorResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}


type PredictorServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  handler PredictorService
}

func (p *PredictorServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PredictorServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *PredictorServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func NewPredictorServiceProcessor(handler PredictorService) *PredictorServiceProcessor {
  self54 := &PredictorServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction)}
  self54.processorMap["predict"] = &predictorServiceProcessorPredict{handler:handler}
  self54.processorMap["multiPredict"] = &predictorServiceProcessorMultiPredict{handler:handler}
  self54.processorMap["calculateVector"] = &predictorServiceProcessorCalculateVector{handler:handler}
  self54.processorMap["calculateBatchVector"] = &predictorServiceProcessorCalculateBatchVector{handler:handler}
  return self54
}

type predictorServiceProcessorPredict struct {
  handler PredictorService
}

func (p *predictorServiceProcessorPredict) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := PredictorServicePredictArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *predictorServiceProcessorPredict) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PredictException:
    msg := PredictorServicePredictResult{E: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("predict", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *predictorServiceProcessorPredict) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*PredictorServicePredictArgs)
  var result PredictorServicePredictResult
  if retval, err := p.handler.Predict(args.Reqs); err != nil {
    switch v := err.(type) {
    case *PredictException:
      result.E = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing predict: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type predictorServiceProcessorMultiPredict struct {
  handler PredictorService
}

func (p *predictorServiceProcessorMultiPredict) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := PredictorServiceMultiPredictArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *predictorServiceProcessorMultiPredict) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *PredictException:
    msg := PredictorServiceMultiPredictResult{E: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("multiPredict", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *predictorServiceProcessorMultiPredict) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*PredictorServiceMultiPredictArgs)
  var result PredictorServiceMultiPredictResult
  if retval, err := p.handler.MultiPredict(args.MultiReq); err != nil {
    switch v := err.(type) {
    case *PredictException:
      result.E = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiPredict: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type predictorServiceProcessorCalculateVector struct {
  handler PredictorService
}

func (p *predictorServiceProcessorCalculateVector) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := PredictorServiceCalculateVectorArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *predictorServiceProcessorCalculateVector) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *CalculateVectorException:
    msg := PredictorServiceCalculateVectorResult{E: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("calculateVector", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *predictorServiceProcessorCalculateVector) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*PredictorServiceCalculateVectorArgs)
  var result PredictorServiceCalculateVectorResult
  if retval, err := p.handler.CalculateVector(args.Reqs); err != nil {
    switch v := err.(type) {
    case *CalculateVectorException:
      result.E = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing calculateVector: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}

type predictorServiceProcessorCalculateBatchVector struct {
  handler PredictorService
}

func (p *predictorServiceProcessorCalculateBatchVector) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := PredictorServiceCalculateBatchVectorArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *predictorServiceProcessorCalculateBatchVector) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *CalculateVectorException:
    msg := PredictorServiceCalculateBatchVectorResult{E: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("calculateBatchVector", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *predictorServiceProcessorCalculateBatchVector) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*PredictorServiceCalculateBatchVectorArgs)
  var result PredictorServiceCalculateBatchVectorResult
  if retval, err := p.handler.CalculateBatchVector(args.Reqs); err != nil {
    switch v := err.(type) {
    case *CalculateVectorException:
      result.E = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing calculateBatchVector: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Reqs
type PredictorServicePredictArgs struct {
  Reqs *PredictRequests `thrift:"reqs,1" db:"reqs" json:"reqs"`
}

func NewPredictorServicePredictArgs() *PredictorServicePredictArgs {
  return &PredictorServicePredictArgs{}
}

var PredictorServicePredictArgs_Reqs_DEFAULT *PredictRequests
func (p *PredictorServicePredictArgs) GetReqs() *PredictRequests {
  if !p.IsSetReqs() {
    return PredictorServicePredictArgs_Reqs_DEFAULT
  }
return p.Reqs
}
func (p *PredictorServicePredictArgs) IsSetReqs() bool {
  return p.Reqs != nil
}

func (p *PredictorServicePredictArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictorServicePredictArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Reqs = NewPredictRequests()
  if err := p.Reqs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Reqs), err)
  }
  return nil
}

func (p *PredictorServicePredictArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("predict_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictorServicePredictArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("reqs", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqs: ", p), err) }
  if err := p.Reqs.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Reqs), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqs: ", p), err) }
  return err
}

func (p *PredictorServicePredictArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictorServicePredictArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PredictorServicePredictResult struct {
  Success *PredictResponses `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *PredictException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPredictorServicePredictResult() *PredictorServicePredictResult {
  return &PredictorServicePredictResult{}
}

var PredictorServicePredictResult_Success_DEFAULT *PredictResponses
func (p *PredictorServicePredictResult) GetSuccess() *PredictResponses {
  if !p.IsSetSuccess() {
    return PredictorServicePredictResult_Success_DEFAULT
  }
return p.Success
}
var PredictorServicePredictResult_E_DEFAULT *PredictException
func (p *PredictorServicePredictResult) GetE() *PredictException {
  if !p.IsSetE() {
    return PredictorServicePredictResult_E_DEFAULT
  }
return p.E
}
func (p *PredictorServicePredictResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PredictorServicePredictResult) IsSetE() bool {
  return p.E != nil
}

func (p *PredictorServicePredictResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictorServicePredictResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewPredictResponses()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PredictorServicePredictResult)  ReadField1(iprot thrift.Protocol) error {
  p.E = NewPredictException()
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PredictorServicePredictResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("predict_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictorServicePredictResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PredictorServicePredictResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PredictorServicePredictResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictorServicePredictResult(%+v)", *p)
}

// Attributes:
//  - MultiReq
type PredictorServiceMultiPredictArgs struct {
  MultiReq *MultiPredictRequest `thrift:"multi_req,1" db:"multi_req" json:"multi_req"`
}

func NewPredictorServiceMultiPredictArgs() *PredictorServiceMultiPredictArgs {
  return &PredictorServiceMultiPredictArgs{}
}

var PredictorServiceMultiPredictArgs_MultiReq_DEFAULT *MultiPredictRequest
func (p *PredictorServiceMultiPredictArgs) GetMultiReq() *MultiPredictRequest {
  if !p.IsSetMultiReq() {
    return PredictorServiceMultiPredictArgs_MultiReq_DEFAULT
  }
return p.MultiReq
}
func (p *PredictorServiceMultiPredictArgs) IsSetMultiReq() bool {
  return p.MultiReq != nil
}

func (p *PredictorServiceMultiPredictArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictorServiceMultiPredictArgs)  ReadField1(iprot thrift.Protocol) error {
  p.MultiReq = NewMultiPredictRequest()
  if err := p.MultiReq.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MultiReq), err)
  }
  return nil
}

func (p *PredictorServiceMultiPredictArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiPredict_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictorServiceMultiPredictArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("multi_req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:multi_req: ", p), err) }
  if err := p.MultiReq.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MultiReq), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:multi_req: ", p), err) }
  return err
}

func (p *PredictorServiceMultiPredictArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictorServiceMultiPredictArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PredictorServiceMultiPredictResult struct {
  Success *MultiPredictResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *PredictException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPredictorServiceMultiPredictResult() *PredictorServiceMultiPredictResult {
  return &PredictorServiceMultiPredictResult{}
}

var PredictorServiceMultiPredictResult_Success_DEFAULT *MultiPredictResponse
func (p *PredictorServiceMultiPredictResult) GetSuccess() *MultiPredictResponse {
  if !p.IsSetSuccess() {
    return PredictorServiceMultiPredictResult_Success_DEFAULT
  }
return p.Success
}
var PredictorServiceMultiPredictResult_E_DEFAULT *PredictException
func (p *PredictorServiceMultiPredictResult) GetE() *PredictException {
  if !p.IsSetE() {
    return PredictorServiceMultiPredictResult_E_DEFAULT
  }
return p.E
}
func (p *PredictorServiceMultiPredictResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PredictorServiceMultiPredictResult) IsSetE() bool {
  return p.E != nil
}

func (p *PredictorServiceMultiPredictResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictorServiceMultiPredictResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewMultiPredictResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PredictorServiceMultiPredictResult)  ReadField1(iprot thrift.Protocol) error {
  p.E = NewPredictException()
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PredictorServiceMultiPredictResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("multiPredict_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictorServiceMultiPredictResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PredictorServiceMultiPredictResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PredictorServiceMultiPredictResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictorServiceMultiPredictResult(%+v)", *p)
}

// Attributes:
//  - Reqs
type PredictorServiceCalculateVectorArgs struct {
  Reqs *CalculateVectorRequests `thrift:"reqs,1" db:"reqs" json:"reqs"`
}

func NewPredictorServiceCalculateVectorArgs() *PredictorServiceCalculateVectorArgs {
  return &PredictorServiceCalculateVectorArgs{}
}

var PredictorServiceCalculateVectorArgs_Reqs_DEFAULT *CalculateVectorRequests
func (p *PredictorServiceCalculateVectorArgs) GetReqs() *CalculateVectorRequests {
  if !p.IsSetReqs() {
    return PredictorServiceCalculateVectorArgs_Reqs_DEFAULT
  }
return p.Reqs
}
func (p *PredictorServiceCalculateVectorArgs) IsSetReqs() bool {
  return p.Reqs != nil
}

func (p *PredictorServiceCalculateVectorArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictorServiceCalculateVectorArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Reqs = NewCalculateVectorRequests()
  if err := p.Reqs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Reqs), err)
  }
  return nil
}

func (p *PredictorServiceCalculateVectorArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("calculateVector_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictorServiceCalculateVectorArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("reqs", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqs: ", p), err) }
  if err := p.Reqs.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Reqs), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqs: ", p), err) }
  return err
}

func (p *PredictorServiceCalculateVectorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictorServiceCalculateVectorArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PredictorServiceCalculateVectorResult struct {
  Success *CalculateVectorResponses `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *CalculateVectorException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPredictorServiceCalculateVectorResult() *PredictorServiceCalculateVectorResult {
  return &PredictorServiceCalculateVectorResult{}
}

var PredictorServiceCalculateVectorResult_Success_DEFAULT *CalculateVectorResponses
func (p *PredictorServiceCalculateVectorResult) GetSuccess() *CalculateVectorResponses {
  if !p.IsSetSuccess() {
    return PredictorServiceCalculateVectorResult_Success_DEFAULT
  }
return p.Success
}
var PredictorServiceCalculateVectorResult_E_DEFAULT *CalculateVectorException
func (p *PredictorServiceCalculateVectorResult) GetE() *CalculateVectorException {
  if !p.IsSetE() {
    return PredictorServiceCalculateVectorResult_E_DEFAULT
  }
return p.E
}
func (p *PredictorServiceCalculateVectorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PredictorServiceCalculateVectorResult) IsSetE() bool {
  return p.E != nil
}

func (p *PredictorServiceCalculateVectorResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictorServiceCalculateVectorResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCalculateVectorResponses()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PredictorServiceCalculateVectorResult)  ReadField1(iprot thrift.Protocol) error {
  p.E = NewCalculateVectorException()
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PredictorServiceCalculateVectorResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("calculateVector_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictorServiceCalculateVectorResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PredictorServiceCalculateVectorResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PredictorServiceCalculateVectorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictorServiceCalculateVectorResult(%+v)", *p)
}

// Attributes:
//  - Reqs
type PredictorServiceCalculateBatchVectorArgs struct {
  Reqs *CalculateBatchVectorRequests `thrift:"reqs,1" db:"reqs" json:"reqs"`
}

func NewPredictorServiceCalculateBatchVectorArgs() *PredictorServiceCalculateBatchVectorArgs {
  return &PredictorServiceCalculateBatchVectorArgs{}
}

var PredictorServiceCalculateBatchVectorArgs_Reqs_DEFAULT *CalculateBatchVectorRequests
func (p *PredictorServiceCalculateBatchVectorArgs) GetReqs() *CalculateBatchVectorRequests {
  if !p.IsSetReqs() {
    return PredictorServiceCalculateBatchVectorArgs_Reqs_DEFAULT
  }
return p.Reqs
}
func (p *PredictorServiceCalculateBatchVectorArgs) IsSetReqs() bool {
  return p.Reqs != nil
}

func (p *PredictorServiceCalculateBatchVectorArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictorServiceCalculateBatchVectorArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Reqs = NewCalculateBatchVectorRequests()
  if err := p.Reqs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Reqs), err)
  }
  return nil
}

func (p *PredictorServiceCalculateBatchVectorArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("calculateBatchVector_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictorServiceCalculateBatchVectorArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("reqs", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqs: ", p), err) }
  if err := p.Reqs.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Reqs), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqs: ", p), err) }
  return err
}

func (p *PredictorServiceCalculateBatchVectorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictorServiceCalculateBatchVectorArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type PredictorServiceCalculateBatchVectorResult struct {
  Success *CalculateBatchVectorResponses `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *CalculateVectorException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewPredictorServiceCalculateBatchVectorResult() *PredictorServiceCalculateBatchVectorResult {
  return &PredictorServiceCalculateBatchVectorResult{}
}

var PredictorServiceCalculateBatchVectorResult_Success_DEFAULT *CalculateBatchVectorResponses
func (p *PredictorServiceCalculateBatchVectorResult) GetSuccess() *CalculateBatchVectorResponses {
  if !p.IsSetSuccess() {
    return PredictorServiceCalculateBatchVectorResult_Success_DEFAULT
  }
return p.Success
}
var PredictorServiceCalculateBatchVectorResult_E_DEFAULT *CalculateVectorException
func (p *PredictorServiceCalculateBatchVectorResult) GetE() *CalculateVectorException {
  if !p.IsSetE() {
    return PredictorServiceCalculateBatchVectorResult_E_DEFAULT
  }
return p.E
}
func (p *PredictorServiceCalculateBatchVectorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PredictorServiceCalculateBatchVectorResult) IsSetE() bool {
  return p.E != nil
}

func (p *PredictorServiceCalculateBatchVectorResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictorServiceCalculateBatchVectorResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewCalculateBatchVectorResponses()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PredictorServiceCalculateBatchVectorResult)  ReadField1(iprot thrift.Protocol) error {
  p.E = NewCalculateVectorException()
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *PredictorServiceCalculateBatchVectorResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("calculateBatchVector_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictorServiceCalculateBatchVectorResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PredictorServiceCalculateBatchVectorResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *PredictorServiceCalculateBatchVectorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictorServiceCalculateBatchVectorResult(%+v)", *p)
}


