// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package predictor

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/algo-data-platform/predictor/golibs/ads_common_go/thirdparty/thrift"
	feature_master0 "github.com/algo-data-platform/predictor/golibs/adgo/feature_master/if/feature_master"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

var _ = feature_master0.GoUnusedProtection__
var GoUnusedProtection__ int;

// Attributes:
//  - LocalIP
//  - ConnectionTimeout
//  - RequestTimeout
//  - IpDiffRange
//  - MaxConnPerServer
//  - PredictorServiceName
//  - HttpPort
//  - PredictorLoadBalanceMethod
//  - UsePredictorStaticList
type RequestOption struct {
  LocalIP string `thrift:"local_ip,1,required" db:"local_ip" json:"local_ip"`
  ConnectionTimeout int32 `thrift:"connection_timeout,2,required" db:"connection_timeout" json:"connection_timeout"`
  RequestTimeout int32 `thrift:"request_timeout,3,required" db:"request_timeout" json:"request_timeout"`
  IpDiffRange int32 `thrift:"ip_diff_range,4,required" db:"ip_diff_range" json:"ip_diff_range"`
  MaxConnPerServer int32 `thrift:"max_conn_per_server,5,required" db:"max_conn_per_server" json:"max_conn_per_server"`
  PredictorServiceName string `thrift:"predictor_service_name,6,required" db:"predictor_service_name" json:"predictor_service_name"`
  HttpPort int32 `thrift:"http_port,7,required" db:"http_port" json:"http_port"`
  PredictorLoadBalanceMethod string `thrift:"predictor_load_balance_method,8,required" db:"predictor_load_balance_method" json:"predictor_load_balance_method"`
  UsePredictorStaticList bool `thrift:"use_predictor_static_list,9,required" db:"use_predictor_static_list" json:"use_predictor_static_list"`
}

func NewRequestOption() *RequestOption {
  return &RequestOption{
LocalIP: "127.0.0.1",

ConnectionTimeout: 40,

RequestTimeout: 60,

IpDiffRange: 65535,

MaxConnPerServer: 3,

HttpPort: 8797,

PredictorLoadBalanceMethod: "random",
}
}


func (p *RequestOption) GetLocalIP() string {
  return p.LocalIP
}

func (p *RequestOption) GetConnectionTimeout() int32 {
  return p.ConnectionTimeout
}

func (p *RequestOption) GetRequestTimeout() int32 {
  return p.RequestTimeout
}

func (p *RequestOption) GetIpDiffRange() int32 {
  return p.IpDiffRange
}

func (p *RequestOption) GetMaxConnPerServer() int32 {
  return p.MaxConnPerServer
}

func (p *RequestOption) GetPredictorServiceName() string {
  return p.PredictorServiceName
}

func (p *RequestOption) GetHttpPort() int32 {
  return p.HttpPort
}

func (p *RequestOption) GetPredictorLoadBalanceMethod() string {
  return p.PredictorLoadBalanceMethod
}

func (p *RequestOption) GetUsePredictorStaticList() bool {
  return p.UsePredictorStaticList
}
func (p *RequestOption) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLocalIP bool = false;
  var issetConnectionTimeout bool = false;
  var issetRequestTimeout bool = false;
  var issetIpDiffRange bool = false;
  var issetMaxConnPerServer bool = false;
  var issetPredictorServiceName bool = false;
  var issetHttpPort bool = false;
  var issetPredictorLoadBalanceMethod bool = false;
  var issetUsePredictorStaticList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetLocalIP = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetConnectionTimeout = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetRequestTimeout = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetIpDiffRange = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetMaxConnPerServer = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetPredictorServiceName = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetHttpPort = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetPredictorLoadBalanceMethod = true
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
      issetUsePredictorStaticList = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLocalIP{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LocalIP is not set"));
  }
  if !issetConnectionTimeout{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ConnectionTimeout is not set"));
  }
  if !issetRequestTimeout{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestTimeout is not set"));
  }
  if !issetIpDiffRange{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IpDiffRange is not set"));
  }
  if !issetMaxConnPerServer{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxConnPerServer is not set"));
  }
  if !issetPredictorServiceName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PredictorServiceName is not set"));
  }
  if !issetHttpPort{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HttpPort is not set"));
  }
  if !issetPredictorLoadBalanceMethod{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PredictorLoadBalanceMethod is not set"));
  }
  if !issetUsePredictorStaticList{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UsePredictorStaticList is not set"));
  }
  return nil
}

func (p *RequestOption)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LocalIP = v
}
  return nil
}

func (p *RequestOption)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConnectionTimeout = v
}
  return nil
}

func (p *RequestOption)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RequestTimeout = v
}
  return nil
}

func (p *RequestOption)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IpDiffRange = v
}
  return nil
}

func (p *RequestOption)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxConnPerServer = v
}
  return nil
}

func (p *RequestOption)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PredictorServiceName = v
}
  return nil
}

func (p *RequestOption)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.HttpPort = v
}
  return nil
}

func (p *RequestOption)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PredictorLoadBalanceMethod = v
}
  return nil
}

func (p *RequestOption)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.UsePredictorStaticList = v
}
  return nil
}

func (p *RequestOption) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("RequestOption"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestOption) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("local_ip", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:local_ip: ", p), err) }
  if err := oprot.WriteString(string(p.LocalIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.local_ip (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:local_ip: ", p), err) }
  return err
}

func (p *RequestOption) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("connection_timeout", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:connection_timeout: ", p), err) }
  if err := oprot.WriteI32(int32(p.ConnectionTimeout)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.connection_timeout (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:connection_timeout: ", p), err) }
  return err
}

func (p *RequestOption) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("request_timeout", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request_timeout: ", p), err) }
  if err := oprot.WriteI32(int32(p.RequestTimeout)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_timeout (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request_timeout: ", p), err) }
  return err
}

func (p *RequestOption) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ip_diff_range", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip_diff_range: ", p), err) }
  if err := oprot.WriteI32(int32(p.IpDiffRange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip_diff_range (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip_diff_range: ", p), err) }
  return err
}

func (p *RequestOption) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("max_conn_per_server", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_conn_per_server: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxConnPerServer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_conn_per_server (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_conn_per_server: ", p), err) }
  return err
}

func (p *RequestOption) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("predictor_service_name", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:predictor_service_name: ", p), err) }
  if err := oprot.WriteString(string(p.PredictorServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.predictor_service_name (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:predictor_service_name: ", p), err) }
  return err
}

func (p *RequestOption) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("http_port", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:http_port: ", p), err) }
  if err := oprot.WriteI32(int32(p.HttpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.http_port (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:http_port: ", p), err) }
  return err
}

func (p *RequestOption) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("predictor_load_balance_method", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:predictor_load_balance_method: ", p), err) }
  if err := oprot.WriteString(string(p.PredictorLoadBalanceMethod)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.predictor_load_balance_method (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:predictor_load_balance_method: ", p), err) }
  return err
}

func (p *RequestOption) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("use_predictor_static_list", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:use_predictor_static_list: ", p), err) }
  if err := oprot.WriteBool(bool(p.UsePredictorStaticList)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.use_predictor_static_list (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:use_predictor_static_list: ", p), err) }
  return err
}

func (p *RequestOption) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestOption(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - Channel
//  - ModelName
//  - ItemFeatures
//  - CommonFeatures
//  - Context
type PredictRequest struct {
  ReqID string `thrift:"req_id,1,required" db:"req_id" json:"req_id"`
  Channel string `thrift:"channel,2,required" db:"channel" json:"channel"`
  ModelName string `thrift:"model_name,3,required" db:"model_name" json:"model_name"`
  ItemFeatures map[int64]*feature_master0.Features `thrift:"item_features,4,required" db:"item_features" json:"item_features"`
  CommonFeatures *feature_master0.Features `thrift:"common_features,5,required" db:"common_features" json:"common_features"`
  Context map[string]string `thrift:"context,6" db:"context" json:"context,omitempty"`
}

func NewPredictRequest() *PredictRequest {
  return &PredictRequest{}
}


func (p *PredictRequest) GetReqID() string {
  return p.ReqID
}

func (p *PredictRequest) GetChannel() string {
  return p.Channel
}

func (p *PredictRequest) GetModelName() string {
  return p.ModelName
}

func (p *PredictRequest) GetItemFeatures() map[int64]*feature_master0.Features {
  return p.ItemFeatures
}
var PredictRequest_CommonFeatures_DEFAULT *feature_master0.Features
func (p *PredictRequest) GetCommonFeatures() *feature_master0.Features {
  if !p.IsSetCommonFeatures() {
    return PredictRequest_CommonFeatures_DEFAULT
  }
return p.CommonFeatures
}
var PredictRequest_Context_DEFAULT map[string]string

func (p *PredictRequest) GetContext() map[string]string {
  return p.Context
}
func (p *PredictRequest) IsSetCommonFeatures() bool {
  return p.CommonFeatures != nil
}

func (p *PredictRequest) IsSetContext() bool {
  return p.Context != nil
}

func (p *PredictRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqID bool = false;
  var issetChannel bool = false;
  var issetModelName bool = false;
  var issetItemFeatures bool = false;
  var issetCommonFeatures bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetChannel = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetModelName = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetItemFeatures = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetCommonFeatures = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReqID is not set"));
  }
  if !issetChannel{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Channel is not set"));
  }
  if !issetModelName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ModelName is not set"));
  }
  if !issetItemFeatures{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ItemFeatures is not set"));
  }
  if !issetCommonFeatures{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommonFeatures is not set"));
  }
  return nil
}

func (p *PredictRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PredictRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Channel = v
}
  return nil
}

func (p *PredictRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ModelName = v
}
  return nil
}

func (p *PredictRequest)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]*feature_master0.Features, size)
  p.ItemFeatures =  tMap
  for i := 0; i < size; i ++ {
var _key1 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
    _val2 := feature_master0.NewFeatures()
    if err := _val2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val2), err)
    }
    p.ItemFeatures[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PredictRequest)  ReadField5(iprot thrift.Protocol) error {
  p.CommonFeatures = feature_master0.NewFeatures()
  if err := p.CommonFeatures.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CommonFeatures), err)
  }
  return nil
}

func (p *PredictRequest)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.Context[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PredictRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PredictRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteString(string(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PredictRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("channel", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channel: ", p), err) }
  if err := oprot.WriteString(string(p.Channel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channel (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channel: ", p), err) }
  return err
}

func (p *PredictRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("model_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:model_name: ", p), err) }
  if err := oprot.WriteString(string(p.ModelName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:model_name: ", p), err) }
  return err
}

func (p *PredictRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("item_features", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:item_features: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.ItemFeatures)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ItemFeatures {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:item_features: ", p), err) }
  return err
}

func (p *PredictRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("common_features", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:common_features: ", p), err) }
  if err := p.CommonFeatures.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CommonFeatures), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:common_features: ", p), err) }
  return err
}

func (p *PredictRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetContext() {
    if err := oprot.WriteFieldBegin("context", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:context: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Context {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:context: ", p), err) }
  }
  return err
}

func (p *PredictRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictRequest(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - ResultsMap
type PredictResponse struct {
  ReqID string `thrift:"req_id,1,required" db:"req_id" json:"req_id"`
  ResultsMap map[int64]*feature_master0.PredictResults `thrift:"results_map,2" db:"results_map" json:"results_map"`
}

func NewPredictResponse() *PredictResponse {
  return &PredictResponse{}
}


func (p *PredictResponse) GetReqID() string {
  return p.ReqID
}

func (p *PredictResponse) GetResultsMap() map[int64]*feature_master0.PredictResults {
  return p.ResultsMap
}
func (p *PredictResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReqID is not set"));
  }
  return nil
}

func (p *PredictResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *PredictResponse)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]*feature_master0.PredictResults, size)
  p.ResultsMap =  tMap
  for i := 0; i < size; i ++ {
var _key5 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
    _val6 := feature_master0.NewPredictResults()
    if err := _val6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val6), err)
    }
    p.ResultsMap[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PredictResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PredictResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteString(string(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *PredictResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("results_map", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:results_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.ResultsMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ResultsMap {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:results_map: ", p), err) }
  return err
}

func (p *PredictResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictResponse(%+v)", *p)
}

// Attributes:
//  - Reqs
//  - RequestOption
//  - Context
type PredictRequests struct {
  Reqs []*PredictRequest `thrift:"reqs,1,required" db:"reqs" json:"reqs"`
  RequestOption *RequestOption `thrift:"request_option,2,required" db:"request_option" json:"request_option"`
  Context map[string]string `thrift:"context,3" db:"context" json:"context,omitempty"`
}

func NewPredictRequests() *PredictRequests {
  return &PredictRequests{}
}


func (p *PredictRequests) GetReqs() []*PredictRequest {
  return p.Reqs
}
var PredictRequests_RequestOption_DEFAULT *RequestOption
func (p *PredictRequests) GetRequestOption() *RequestOption {
  if !p.IsSetRequestOption() {
    return PredictRequests_RequestOption_DEFAULT
  }
return p.RequestOption
}
var PredictRequests_Context_DEFAULT map[string]string

func (p *PredictRequests) GetContext() map[string]string {
  return p.Context
}
func (p *PredictRequests) IsSetRequestOption() bool {
  return p.RequestOption != nil
}

func (p *PredictRequests) IsSetContext() bool {
  return p.Context != nil
}

func (p *PredictRequests) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqs bool = false;
  var issetRequestOption bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqs = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetRequestOption = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Reqs is not set"));
  }
  if !issetRequestOption{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestOption is not set"));
  }
  return nil
}

func (p *PredictRequests)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PredictRequest, 0, size)
  p.Reqs =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := NewPredictRequest()
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.Reqs = append(p.Reqs, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PredictRequests)  ReadField2(iprot thrift.Protocol) error {
  p.RequestOption = NewRequestOption()
  if err := p.RequestOption.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestOption), err)
  }
  return nil
}

func (p *PredictRequests)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key8 = v
}
var _val9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val9 = v
}
    p.Context[_key8] = _val9
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PredictRequests) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PredictRequests"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictRequests) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("reqs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Reqs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Reqs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqs: ", p), err) }
  return err
}

func (p *PredictRequests) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("request_option", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request_option: ", p), err) }
  if err := p.RequestOption.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestOption), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request_option: ", p), err) }
  return err
}

func (p *PredictRequests) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetContext() {
    if err := oprot.WriteFieldBegin("context", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:context: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Context {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:context: ", p), err) }
  }
  return err
}

func (p *PredictRequests) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictRequests(%+v)", *p)
}

// Attributes:
//  - Resps
type PredictResponses struct {
  Resps []*PredictResponse `thrift:"resps,1,required" db:"resps" json:"resps"`
}

func NewPredictResponses() *PredictResponses {
  return &PredictResponses{}
}


func (p *PredictResponses) GetResps() []*PredictResponse {
  return p.Resps
}
func (p *PredictResponses) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResps bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResps = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResps{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Resps is not set"));
  }
  return nil
}

func (p *PredictResponses)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PredictResponse, 0, size)
  p.Resps =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := NewPredictResponse()
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Resps = append(p.Resps, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PredictResponses) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PredictResponses"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictResponses) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("resps", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resps: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Resps {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resps: ", p), err) }
  return err
}

func (p *PredictResponses) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictResponses(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - ModelNames
//  - SingleRequest
//  - RequestOption
//  - Context
type MultiPredictRequest struct {
  ReqID string `thrift:"req_id,1,required" db:"req_id" json:"req_id"`
  ModelNames []string `thrift:"model_names,2,required" db:"model_names" json:"model_names"`
  SingleRequest *PredictRequest `thrift:"single_request,3,required" db:"single_request" json:"single_request"`
  RequestOption *RequestOption `thrift:"request_option,4,required" db:"request_option" json:"request_option"`
  Context map[string]string `thrift:"context,5" db:"context" json:"context,omitempty"`
}

func NewMultiPredictRequest() *MultiPredictRequest {
  return &MultiPredictRequest{}
}


func (p *MultiPredictRequest) GetReqID() string {
  return p.ReqID
}

func (p *MultiPredictRequest) GetModelNames() []string {
  return p.ModelNames
}
var MultiPredictRequest_SingleRequest_DEFAULT *PredictRequest
func (p *MultiPredictRequest) GetSingleRequest() *PredictRequest {
  if !p.IsSetSingleRequest() {
    return MultiPredictRequest_SingleRequest_DEFAULT
  }
return p.SingleRequest
}
var MultiPredictRequest_RequestOption_DEFAULT *RequestOption
func (p *MultiPredictRequest) GetRequestOption() *RequestOption {
  if !p.IsSetRequestOption() {
    return MultiPredictRequest_RequestOption_DEFAULT
  }
return p.RequestOption
}
var MultiPredictRequest_Context_DEFAULT map[string]string

func (p *MultiPredictRequest) GetContext() map[string]string {
  return p.Context
}
func (p *MultiPredictRequest) IsSetSingleRequest() bool {
  return p.SingleRequest != nil
}

func (p *MultiPredictRequest) IsSetRequestOption() bool {
  return p.RequestOption != nil
}

func (p *MultiPredictRequest) IsSetContext() bool {
  return p.Context != nil
}

func (p *MultiPredictRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqID bool = false;
  var issetModelNames bool = false;
  var issetSingleRequest bool = false;
  var issetRequestOption bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetModelNames = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetSingleRequest = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetRequestOption = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReqID is not set"));
  }
  if !issetModelNames{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ModelNames is not set"));
  }
  if !issetSingleRequest{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SingleRequest is not set"));
  }
  if !issetRequestOption{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestOption is not set"));
  }
  return nil
}

func (p *MultiPredictRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MultiPredictRequest)  ReadField2(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ModelNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.ModelNames = append(p.ModelNames, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MultiPredictRequest)  ReadField3(iprot thrift.Protocol) error {
  p.SingleRequest = NewPredictRequest()
  if err := p.SingleRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SingleRequest), err)
  }
  return nil
}

func (p *MultiPredictRequest)  ReadField4(iprot thrift.Protocol) error {
  p.RequestOption = NewRequestOption()
  if err := p.RequestOption.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestOption), err)
  }
  return nil
}

func (p *MultiPredictRequest)  ReadField5(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key12 = v
}
var _val13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val13 = v
}
    p.Context[_key12] = _val13
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MultiPredictRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MultiPredictRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiPredictRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteString(string(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MultiPredictRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("model_names", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ModelNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ModelNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_names: ", p), err) }
  return err
}

func (p *MultiPredictRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("single_request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:single_request: ", p), err) }
  if err := p.SingleRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SingleRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:single_request: ", p), err) }
  return err
}

func (p *MultiPredictRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("request_option", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:request_option: ", p), err) }
  if err := p.RequestOption.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestOption), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:request_option: ", p), err) }
  return err
}

func (p *MultiPredictRequest) writeField5(oprot thrift.Protocol) (err error) {
  if p.IsSetContext() {
    if err := oprot.WriteFieldBegin("context", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:context: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Context {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:context: ", p), err) }
  }
  return err
}

func (p *MultiPredictRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiPredictRequest(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - ModelResponses
//  - ReturnCode
type MultiPredictResponse struct {
  ReqID string `thrift:"req_id,1,required" db:"req_id" json:"req_id"`
  ModelResponses map[string]*PredictResponse `thrift:"model_responses,2,required" db:"model_responses" json:"model_responses"`
  ReturnCode int32 `thrift:"return_code,3,required" db:"return_code" json:"return_code"`
}

func NewMultiPredictResponse() *MultiPredictResponse {
  return &MultiPredictResponse{}
}


func (p *MultiPredictResponse) GetReqID() string {
  return p.ReqID
}

func (p *MultiPredictResponse) GetModelResponses() map[string]*PredictResponse {
  return p.ModelResponses
}

func (p *MultiPredictResponse) GetReturnCode() int32 {
  return p.ReturnCode
}
func (p *MultiPredictResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqID bool = false;
  var issetModelResponses bool = false;
  var issetReturnCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetModelResponses = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetReturnCode = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReqID is not set"));
  }
  if !issetModelResponses{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ModelResponses is not set"));
  }
  if !issetReturnCode{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReturnCode is not set"));
  }
  return nil
}

func (p *MultiPredictResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *MultiPredictResponse)  ReadField2(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*PredictResponse, size)
  p.ModelResponses =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
    _val15 := NewPredictResponse()
    if err := _val15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val15), err)
    }
    p.ModelResponses[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MultiPredictResponse)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReturnCode = v
}
  return nil
}

func (p *MultiPredictResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MultiPredictResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MultiPredictResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteString(string(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *MultiPredictResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("model_responses", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_responses: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ModelResponses)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ModelResponses {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_responses: ", p), err) }
  return err
}

func (p *MultiPredictResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("return_code", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:return_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReturnCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.return_code (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:return_code: ", p), err) }
  return err
}

func (p *MultiPredictResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MultiPredictResponse(%+v)", *p)
}

// Attributes:
//  - Message
type PredictException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewPredictException() *PredictException {
  return &PredictException{}
}


func (p *PredictException) GetMessage() string {
  return p.Message
}
func (p *PredictException) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictException)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *PredictException) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PredictException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictException) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *PredictException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictException(%+v)", *p)
}

func (p *PredictException) Error() string {
  return p.String()
}

// Attributes:
//  - ReqID
//  - Channel
//  - ModelName
//  - Features
//  - OutputNames
type CalculateVectorRequest struct {
  ReqID string `thrift:"req_id,1,required" db:"req_id" json:"req_id"`
  Channel string `thrift:"channel,2,required" db:"channel" json:"channel"`
  ModelName string `thrift:"model_name,3,required" db:"model_name" json:"model_name"`
  Features *feature_master0.Features `thrift:"features,4,required" db:"features" json:"features"`
  OutputNames []string `thrift:"output_names,5,required" db:"output_names" json:"output_names"`
}

func NewCalculateVectorRequest() *CalculateVectorRequest {
  return &CalculateVectorRequest{}
}


func (p *CalculateVectorRequest) GetReqID() string {
  return p.ReqID
}

func (p *CalculateVectorRequest) GetChannel() string {
  return p.Channel
}

func (p *CalculateVectorRequest) GetModelName() string {
  return p.ModelName
}
var CalculateVectorRequest_Features_DEFAULT *feature_master0.Features
func (p *CalculateVectorRequest) GetFeatures() *feature_master0.Features {
  if !p.IsSetFeatures() {
    return CalculateVectorRequest_Features_DEFAULT
  }
return p.Features
}

func (p *CalculateVectorRequest) GetOutputNames() []string {
  return p.OutputNames
}
func (p *CalculateVectorRequest) IsSetFeatures() bool {
  return p.Features != nil
}

func (p *CalculateVectorRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqID bool = false;
  var issetChannel bool = false;
  var issetModelName bool = false;
  var issetFeatures bool = false;
  var issetOutputNames bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetChannel = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetModelName = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetFeatures = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetOutputNames = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReqID is not set"));
  }
  if !issetChannel{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Channel is not set"));
  }
  if !issetModelName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ModelName is not set"));
  }
  if !issetFeatures{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Features is not set"));
  }
  if !issetOutputNames{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OutputNames is not set"));
  }
  return nil
}

func (p *CalculateVectorRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *CalculateVectorRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Channel = v
}
  return nil
}

func (p *CalculateVectorRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ModelName = v
}
  return nil
}

func (p *CalculateVectorRequest)  ReadField4(iprot thrift.Protocol) error {
  p.Features = feature_master0.NewFeatures()
  if err := p.Features.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Features), err)
  }
  return nil
}

func (p *CalculateVectorRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OutputNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.OutputNames = append(p.OutputNames, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CalculateVectorRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CalculateVectorRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculateVectorRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteString(string(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *CalculateVectorRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("channel", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channel: ", p), err) }
  if err := oprot.WriteString(string(p.Channel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channel (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channel: ", p), err) }
  return err
}

func (p *CalculateVectorRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("model_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:model_name: ", p), err) }
  if err := oprot.WriteString(string(p.ModelName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:model_name: ", p), err) }
  return err
}

func (p *CalculateVectorRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("features", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:features: ", p), err) }
  if err := p.Features.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Features), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:features: ", p), err) }
  return err
}

func (p *CalculateVectorRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("output_names", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:output_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.OutputNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OutputNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:output_names: ", p), err) }
  return err
}

func (p *CalculateVectorRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculateVectorRequest(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - ModelTimestamp
//  - VectorMap
//  - ReturnCode
type CalculateVectorResponse struct {
  ReqID string `thrift:"req_id,1,required" db:"req_id" json:"req_id"`
  ModelTimestamp string `thrift:"model_timestamp,2,required" db:"model_timestamp" json:"model_timestamp"`
  VectorMap map[string][]float64 `thrift:"vector_map,3,required" db:"vector_map" json:"vector_map"`
  ReturnCode *int32 `thrift:"return_code,4" db:"return_code" json:"return_code,omitempty"`
}

func NewCalculateVectorResponse() *CalculateVectorResponse {
  return &CalculateVectorResponse{}
}


func (p *CalculateVectorResponse) GetReqID() string {
  return p.ReqID
}

func (p *CalculateVectorResponse) GetModelTimestamp() string {
  return p.ModelTimestamp
}

func (p *CalculateVectorResponse) GetVectorMap() map[string][]float64 {
  return p.VectorMap
}
var CalculateVectorResponse_ReturnCode_DEFAULT int32
func (p *CalculateVectorResponse) GetReturnCode() int32 {
  if !p.IsSetReturnCode() {
    return CalculateVectorResponse_ReturnCode_DEFAULT
  }
return *p.ReturnCode
}
func (p *CalculateVectorResponse) IsSetReturnCode() bool {
  return p.ReturnCode != nil
}

func (p *CalculateVectorResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqID bool = false;
  var issetModelTimestamp bool = false;
  var issetVectorMap bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetModelTimestamp = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetVectorMap = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReqID is not set"));
  }
  if !issetModelTimestamp{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ModelTimestamp is not set"));
  }
  if !issetVectorMap{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VectorMap is not set"));
  }
  return nil
}

func (p *CalculateVectorResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *CalculateVectorResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ModelTimestamp = v
}
  return nil
}

func (p *CalculateVectorResponse)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]float64, size)
  p.VectorMap =  tMap
  for i := 0; i < size; i ++ {
var _key17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key17 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]float64, 0, size)
    _val18 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem19 float64
      if v, err := iprot.ReadDouble(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem19 = v
}
      _val18 = append(_val18, _elem19)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.VectorMap[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CalculateVectorResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReturnCode = &v
}
  return nil
}

func (p *CalculateVectorResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CalculateVectorResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculateVectorResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteString(string(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *CalculateVectorResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("model_timestamp", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.ModelTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model_timestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_timestamp: ", p), err) }
  return err
}

func (p *CalculateVectorResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vector_map", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vector_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.VectorMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.VectorMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.DOUBLE, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteDouble(float64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vector_map: ", p), err) }
  return err
}

func (p *CalculateVectorResponse) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetReturnCode() {
    if err := oprot.WriteFieldBegin("return_code", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:return_code: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReturnCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.return_code (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:return_code: ", p), err) }
  }
  return err
}

func (p *CalculateVectorResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculateVectorResponse(%+v)", *p)
}

// Attributes:
//  - Reqs
//  - RequestOption
//  - Context
type CalculateVectorRequests struct {
  Reqs []*CalculateVectorRequest `thrift:"reqs,1,required" db:"reqs" json:"reqs"`
  RequestOption *RequestOption `thrift:"request_option,2,required" db:"request_option" json:"request_option"`
  Context map[string]string `thrift:"context,3" db:"context" json:"context,omitempty"`
}

func NewCalculateVectorRequests() *CalculateVectorRequests {
  return &CalculateVectorRequests{}
}


func (p *CalculateVectorRequests) GetReqs() []*CalculateVectorRequest {
  return p.Reqs
}
var CalculateVectorRequests_RequestOption_DEFAULT *RequestOption
func (p *CalculateVectorRequests) GetRequestOption() *RequestOption {
  if !p.IsSetRequestOption() {
    return CalculateVectorRequests_RequestOption_DEFAULT
  }
return p.RequestOption
}
var CalculateVectorRequests_Context_DEFAULT map[string]string

func (p *CalculateVectorRequests) GetContext() map[string]string {
  return p.Context
}
func (p *CalculateVectorRequests) IsSetRequestOption() bool {
  return p.RequestOption != nil
}

func (p *CalculateVectorRequests) IsSetContext() bool {
  return p.Context != nil
}

func (p *CalculateVectorRequests) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqs bool = false;
  var issetRequestOption bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqs = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetRequestOption = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Reqs is not set"));
  }
  if !issetRequestOption{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestOption is not set"));
  }
  return nil
}

func (p *CalculateVectorRequests)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CalculateVectorRequest, 0, size)
  p.Reqs =  tSlice
  for i := 0; i < size; i ++ {
    _elem20 := NewCalculateVectorRequest()
    if err := _elem20.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
    }
    p.Reqs = append(p.Reqs, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CalculateVectorRequests)  ReadField2(iprot thrift.Protocol) error {
  p.RequestOption = NewRequestOption()
  if err := p.RequestOption.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestOption), err)
  }
  return nil
}

func (p *CalculateVectorRequests)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key21 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key21 = v
}
var _val22 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val22 = v
}
    p.Context[_key21] = _val22
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CalculateVectorRequests) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CalculateVectorRequests"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculateVectorRequests) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("reqs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Reqs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Reqs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqs: ", p), err) }
  return err
}

func (p *CalculateVectorRequests) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("request_option", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request_option: ", p), err) }
  if err := p.RequestOption.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestOption), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request_option: ", p), err) }
  return err
}

func (p *CalculateVectorRequests) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetContext() {
    if err := oprot.WriteFieldBegin("context", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:context: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Context {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:context: ", p), err) }
  }
  return err
}

func (p *CalculateVectorRequests) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculateVectorRequests(%+v)", *p)
}

// Attributes:
//  - Resps
type CalculateVectorResponses struct {
  Resps []*CalculateVectorResponse `thrift:"resps,1,required" db:"resps" json:"resps"`
}

func NewCalculateVectorResponses() *CalculateVectorResponses {
  return &CalculateVectorResponses{}
}


func (p *CalculateVectorResponses) GetResps() []*CalculateVectorResponse {
  return p.Resps
}
func (p *CalculateVectorResponses) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResps bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResps = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResps{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Resps is not set"));
  }
  return nil
}

func (p *CalculateVectorResponses)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CalculateVectorResponse, 0, size)
  p.Resps =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := NewCalculateVectorResponse()
    if err := _elem23.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.Resps = append(p.Resps, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CalculateVectorResponses) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CalculateVectorResponses"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculateVectorResponses) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("resps", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resps: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Resps {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resps: ", p), err) }
  return err
}

func (p *CalculateVectorResponses) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculateVectorResponses(%+v)", *p)
}

// Attributes:
//  - Message
type CalculateVectorException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewCalculateVectorException() *CalculateVectorException {
  return &CalculateVectorException{}
}


func (p *CalculateVectorException) GetMessage() string {
  return p.Message
}
func (p *CalculateVectorException) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CalculateVectorException)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *CalculateVectorException) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CalculateVectorException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculateVectorException) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *CalculateVectorException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculateVectorException(%+v)", *p)
}

func (p *CalculateVectorException) Error() string {
  return p.String()
}

// Attributes:
//  - ReqID
//  - Channel
//  - ModelName
//  - FeaturesMap
//  - OutputNames
//  - Context
type CalculateBatchVectorRequest struct {
  ReqID string `thrift:"req_id,1,required" db:"req_id" json:"req_id"`
  Channel string `thrift:"channel,2,required" db:"channel" json:"channel"`
  ModelName string `thrift:"model_name,3,required" db:"model_name" json:"model_name"`
  FeaturesMap map[int64]*feature_master0.Features `thrift:"features_map,4,required" db:"features_map" json:"features_map"`
  OutputNames []string `thrift:"output_names,5,required" db:"output_names" json:"output_names"`
  Context map[string]string `thrift:"context,6" db:"context" json:"context,omitempty"`
}

func NewCalculateBatchVectorRequest() *CalculateBatchVectorRequest {
  return &CalculateBatchVectorRequest{}
}


func (p *CalculateBatchVectorRequest) GetReqID() string {
  return p.ReqID
}

func (p *CalculateBatchVectorRequest) GetChannel() string {
  return p.Channel
}

func (p *CalculateBatchVectorRequest) GetModelName() string {
  return p.ModelName
}

func (p *CalculateBatchVectorRequest) GetFeaturesMap() map[int64]*feature_master0.Features {
  return p.FeaturesMap
}

func (p *CalculateBatchVectorRequest) GetOutputNames() []string {
  return p.OutputNames
}
var CalculateBatchVectorRequest_Context_DEFAULT map[string]string

func (p *CalculateBatchVectorRequest) GetContext() map[string]string {
  return p.Context
}
func (p *CalculateBatchVectorRequest) IsSetContext() bool {
  return p.Context != nil
}

func (p *CalculateBatchVectorRequest) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqID bool = false;
  var issetChannel bool = false;
  var issetModelName bool = false;
  var issetFeaturesMap bool = false;
  var issetOutputNames bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetChannel = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetModelName = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetFeaturesMap = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetOutputNames = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReqID is not set"));
  }
  if !issetChannel{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Channel is not set"));
  }
  if !issetModelName{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ModelName is not set"));
  }
  if !issetFeaturesMap{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FeaturesMap is not set"));
  }
  if !issetOutputNames{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OutputNames is not set"));
  }
  return nil
}

func (p *CalculateBatchVectorRequest)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *CalculateBatchVectorRequest)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Channel = v
}
  return nil
}

func (p *CalculateBatchVectorRequest)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ModelName = v
}
  return nil
}

func (p *CalculateBatchVectorRequest)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]*feature_master0.Features, size)
  p.FeaturesMap =  tMap
  for i := 0; i < size; i ++ {
var _key24 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key24 = v
}
    _val25 := feature_master0.NewFeatures()
    if err := _val25.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val25), err)
    }
    p.FeaturesMap[_key24] = _val25
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CalculateBatchVectorRequest)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OutputNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem26 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem26 = v
}
    p.OutputNames = append(p.OutputNames, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CalculateBatchVectorRequest)  ReadField6(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key27 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key27 = v
}
var _val28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val28 = v
}
    p.Context[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CalculateBatchVectorRequest) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CalculateBatchVectorRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculateBatchVectorRequest) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteString(string(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *CalculateBatchVectorRequest) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("channel", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channel: ", p), err) }
  if err := oprot.WriteString(string(p.Channel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channel (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channel: ", p), err) }
  return err
}

func (p *CalculateBatchVectorRequest) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("model_name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:model_name: ", p), err) }
  if err := oprot.WriteString(string(p.ModelName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model_name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:model_name: ", p), err) }
  return err
}

func (p *CalculateBatchVectorRequest) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("features_map", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:features_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.FeaturesMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.FeaturesMap {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:features_map: ", p), err) }
  return err
}

func (p *CalculateBatchVectorRequest) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("output_names", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:output_names: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.OutputNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OutputNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:output_names: ", p), err) }
  return err
}

func (p *CalculateBatchVectorRequest) writeField6(oprot thrift.Protocol) (err error) {
  if p.IsSetContext() {
    if err := oprot.WriteFieldBegin("context", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:context: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Context {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:context: ", p), err) }
  }
  return err
}

func (p *CalculateBatchVectorRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculateBatchVectorRequest(%+v)", *p)
}

// Attributes:
//  - ReqID
//  - ModelTimestamp
//  - VectorMap
//  - ReturnCode
type CalculateBatchVectorResponse struct {
  ReqID string `thrift:"req_id,1,required" db:"req_id" json:"req_id"`
  ModelTimestamp string `thrift:"model_timestamp,2,required" db:"model_timestamp" json:"model_timestamp"`
  VectorMap map[int64]map[string][]float64 `thrift:"vector_map,3,required" db:"vector_map" json:"vector_map"`
  ReturnCode *int32 `thrift:"return_code,4" db:"return_code" json:"return_code,omitempty"`
}

func NewCalculateBatchVectorResponse() *CalculateBatchVectorResponse {
  return &CalculateBatchVectorResponse{}
}


func (p *CalculateBatchVectorResponse) GetReqID() string {
  return p.ReqID
}

func (p *CalculateBatchVectorResponse) GetModelTimestamp() string {
  return p.ModelTimestamp
}

func (p *CalculateBatchVectorResponse) GetVectorMap() map[int64]map[string][]float64 {
  return p.VectorMap
}
var CalculateBatchVectorResponse_ReturnCode_DEFAULT int32
func (p *CalculateBatchVectorResponse) GetReturnCode() int32 {
  if !p.IsSetReturnCode() {
    return CalculateBatchVectorResponse_ReturnCode_DEFAULT
  }
return *p.ReturnCode
}
func (p *CalculateBatchVectorResponse) IsSetReturnCode() bool {
  return p.ReturnCode != nil
}

func (p *CalculateBatchVectorResponse) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqID bool = false;
  var issetModelTimestamp bool = false;
  var issetVectorMap bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetModelTimestamp = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetVectorMap = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqID{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReqID is not set"));
  }
  if !issetModelTimestamp{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ModelTimestamp is not set"));
  }
  if !issetVectorMap{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VectorMap is not set"));
  }
  return nil
}

func (p *CalculateBatchVectorResponse)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *CalculateBatchVectorResponse)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ModelTimestamp = v
}
  return nil
}

func (p *CalculateBatchVectorResponse)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]map[string][]float64, size)
  p.VectorMap =  tMap
  for i := 0; i < size; i ++ {
var _key29 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key29 = v
}
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[string][]float64, size)
    _val30 :=  tMap
    for i := 0; i < size; i ++ {
var _key31 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key31 = v
}
      _, size, err := iprot.ReadListBegin()
      if err != nil {
        return thrift.PrependError("error reading list begin: ", err)
      }
      tSlice := make([]float64, 0, size)
      _val32 :=  tSlice
      for i := 0; i < size; i ++ {
var _elem33 float64
        if v, err := iprot.ReadDouble(); err != nil {
        return thrift.PrependError("error reading field 0: ", err)
} else {
        _elem33 = v
}
        _val32 = append(_val32, _elem33)
      }
      if err := iprot.ReadListEnd(); err != nil {
        return thrift.PrependError("error reading list end: ", err)
      }
      _val30[_key31] = _val32
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.VectorMap[_key29] = _val30
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CalculateBatchVectorResponse)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReturnCode = &v
}
  return nil
}

func (p *CalculateBatchVectorResponse) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CalculateBatchVectorResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculateBatchVectorResponse) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req_id: ", p), err) }
  if err := oprot.WriteString(string(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req_id: ", p), err) }
  return err
}

func (p *CalculateBatchVectorResponse) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("model_timestamp", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model_timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.ModelTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model_timestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model_timestamp: ", p), err) }
  return err
}

func (p *CalculateBatchVectorResponse) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("vector_map", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vector_map: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I64, thrift.MAP, len(p.VectorMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.VectorMap {
    if err := oprot.WriteI64(int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(thrift.DOUBLE, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := oprot.WriteDouble(float64(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vector_map: ", p), err) }
  return err
}

func (p *CalculateBatchVectorResponse) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetReturnCode() {
    if err := oprot.WriteFieldBegin("return_code", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:return_code: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReturnCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.return_code (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:return_code: ", p), err) }
  }
  return err
}

func (p *CalculateBatchVectorResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculateBatchVectorResponse(%+v)", *p)
}

// Attributes:
//  - Reqs
//  - RequestOption
//  - Context
type CalculateBatchVectorRequests struct {
  Reqs []*CalculateBatchVectorRequest `thrift:"reqs,1,required" db:"reqs" json:"reqs"`
  RequestOption *RequestOption `thrift:"request_option,2,required" db:"request_option" json:"request_option"`
  Context map[string]string `thrift:"context,3" db:"context" json:"context,omitempty"`
}

func NewCalculateBatchVectorRequests() *CalculateBatchVectorRequests {
  return &CalculateBatchVectorRequests{}
}


func (p *CalculateBatchVectorRequests) GetReqs() []*CalculateBatchVectorRequest {
  return p.Reqs
}
var CalculateBatchVectorRequests_RequestOption_DEFAULT *RequestOption
func (p *CalculateBatchVectorRequests) GetRequestOption() *RequestOption {
  if !p.IsSetRequestOption() {
    return CalculateBatchVectorRequests_RequestOption_DEFAULT
  }
return p.RequestOption
}
var CalculateBatchVectorRequests_Context_DEFAULT map[string]string

func (p *CalculateBatchVectorRequests) GetContext() map[string]string {
  return p.Context
}
func (p *CalculateBatchVectorRequests) IsSetRequestOption() bool {
  return p.RequestOption != nil
}

func (p *CalculateBatchVectorRequests) IsSetContext() bool {
  return p.Context != nil
}

func (p *CalculateBatchVectorRequests) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReqs bool = false;
  var issetRequestOption bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetReqs = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetRequestOption = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReqs{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Reqs is not set"));
  }
  if !issetRequestOption{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestOption is not set"));
  }
  return nil
}

func (p *CalculateBatchVectorRequests)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CalculateBatchVectorRequest, 0, size)
  p.Reqs =  tSlice
  for i := 0; i < size; i ++ {
    _elem34 := NewCalculateBatchVectorRequest()
    if err := _elem34.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
    }
    p.Reqs = append(p.Reqs, _elem34)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CalculateBatchVectorRequests)  ReadField2(iprot thrift.Protocol) error {
  p.RequestOption = NewRequestOption()
  if err := p.RequestOption.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestOption), err)
  }
  return nil
}

func (p *CalculateBatchVectorRequests)  ReadField3(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Context =  tMap
  for i := 0; i < size; i ++ {
var _key35 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key35 = v
}
var _val36 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val36 = v
}
    p.Context[_key35] = _val36
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CalculateBatchVectorRequests) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CalculateBatchVectorRequests"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculateBatchVectorRequests) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("reqs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Reqs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Reqs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqs: ", p), err) }
  return err
}

func (p *CalculateBatchVectorRequests) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("request_option", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request_option: ", p), err) }
  if err := p.RequestOption.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestOption), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request_option: ", p), err) }
  return err
}

func (p *CalculateBatchVectorRequests) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetContext() {
    if err := oprot.WriteFieldBegin("context", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:context: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Context)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Context {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:context: ", p), err) }
  }
  return err
}

func (p *CalculateBatchVectorRequests) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculateBatchVectorRequests(%+v)", *p)
}

// Attributes:
//  - Resps
type CalculateBatchVectorResponses struct {
  Resps []*CalculateBatchVectorResponse `thrift:"resps,1,required" db:"resps" json:"resps"`
}

func NewCalculateBatchVectorResponses() *CalculateBatchVectorResponses {
  return &CalculateBatchVectorResponses{}
}


func (p *CalculateBatchVectorResponses) GetResps() []*CalculateBatchVectorResponse {
  return p.Resps
}
func (p *CalculateBatchVectorResponses) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResps bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetResps = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResps{
    return thrift.NewProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Resps is not set"));
  }
  return nil
}

func (p *CalculateBatchVectorResponses)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CalculateBatchVectorResponse, 0, size)
  p.Resps =  tSlice
  for i := 0; i < size; i ++ {
    _elem37 := NewCalculateBatchVectorResponse()
    if err := _elem37.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
    }
    p.Resps = append(p.Resps, _elem37)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CalculateBatchVectorResponses) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("CalculateBatchVectorResponses"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CalculateBatchVectorResponses) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("resps", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:resps: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Resps {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:resps: ", p), err) }
  return err
}

func (p *CalculateBatchVectorResponses) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CalculateBatchVectorResponses(%+v)", *p)
}

