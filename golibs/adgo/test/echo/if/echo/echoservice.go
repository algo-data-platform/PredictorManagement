// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package echo

import (
	"bytes"
	"sync"
	"fmt"
	thrift "github.com/algo-data-platform/predictor/golibs/adgo/thirdparty/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal

type EchoService interface {
  // Parameters:
  //  - Request
  Echo(request *EchoRequest) (r *EchoResponse, err error)
}

type EchoServiceClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
}

func (client *EchoServiceClient) Close() error {
  return client.Transport.Close()
}

func NewEchoServiceClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *EchoServiceClient {
  return &EchoServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewEchoServiceClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *EchoServiceClient {
  return &EchoServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Request
func (p *EchoServiceClient) Echo(request *EchoRequest) (r *EchoResponse, err error) {
  if err = p.sendEcho(request); err != nil { return }
  return p.recvEcho()
}

func (p *EchoServiceClient) sendEcho(request *EchoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("echo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := EchoServiceEchoArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *EchoServiceClient) recvEcho() (value *EchoResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "echo" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "echo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "echo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "echo failed: invalid message type")
    return
  }
  result := EchoServiceEchoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}


type EchoServiceThreadsafeClient struct {
  Transport thrift.Transport
  ProtocolFactory thrift.ProtocolFactory
  InputProtocol thrift.Protocol
  OutputProtocol thrift.Protocol
  SeqId int32
  Mu sync.Mutex
}

func NewEchoServiceThreadsafeClientFactory(t thrift.Transport, f thrift.ProtocolFactory) *EchoServiceThreadsafeClient {
  return &EchoServiceThreadsafeClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewEchoServiceThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *EchoServiceThreadsafeClient {
  return &EchoServiceThreadsafeClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *EchoServiceThreadsafeClient) Threadsafe() {}

// Parameters:
//  - Request
func (p *EchoServiceThreadsafeClient) Echo(request *EchoRequest) (r *EchoResponse, err error) {
  p.Mu.Lock()
  defer p.Mu.Unlock()
  if err = p.sendEcho(request); err != nil { return }
  return p.recvEcho()
}

func (p *EchoServiceThreadsafeClient) sendEcho(request *EchoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("echo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := EchoServiceEchoArgs{
  Request : request,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *EchoServiceThreadsafeClient) recvEcho() (value *EchoResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "echo" {
    err = thrift.NewApplicationException(thrift.WRONG_METHOD_NAME, "echo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewApplicationException(thrift.BAD_SEQUENCE_ID, "echo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "echo failed: invalid message type")
    return
  }
  result := EchoServiceEchoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.E != nil {
    err = result.E
    return 
  }
  value = result.GetSuccess()
  return
}


type EchoServiceProcessor struct {
  processorMap map[string]thrift.ProcessorFunction
  handler EchoService
}

func (p *EchoServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *EchoServiceProcessor) GetProcessorFunction(key string) (processor thrift.ProcessorFunction, err error) {
  if processor, ok := p.processorMap[key]; ok {
    return processor, nil
  }
  return nil, nil // generic error message will be sent
}

func (p *EchoServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunction {
  return p.processorMap
}

func NewEchoServiceProcessor(handler EchoService) *EchoServiceProcessor {
  self4 := &EchoServiceProcessor{handler:handler, processorMap:make(map[string]thrift.ProcessorFunction)}
  self4.processorMap["echo"] = &echoServiceProcessorEcho{handler:handler}
  return self4
}

type echoServiceProcessorEcho struct {
  handler EchoService
}

func (p *echoServiceProcessorEcho) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
  args := EchoServiceEchoArgs{}
  if err := args.Read(iprot); err != nil {
    return nil, err
  }
  iprot.ReadMessageEnd()
  return &args, nil
}

func (p *echoServiceProcessorEcho) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
  var err2 error
  messageType := thrift.REPLY
  switch v := result.(type) {
  case *Exception:
    msg := EchoServiceEchoResult{E: v}
    result = &msg
  case thrift.ApplicationException:
    messageType = thrift.EXCEPTION
  }
  if err2 = oprot.WriteMessageBegin("echo", messageType, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  return err
}

func (p *echoServiceProcessorEcho) Run(argStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
  args := argStruct.(*EchoServiceEchoArgs)
  var result EchoServiceEchoResult
  if retval, err := p.handler.Echo(args.Request); err != nil {
    switch v := err.(type) {
    case *Exception:
      result.E = v
    default:
      x := thrift.NewApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echo: " + err.Error())
      return x, x
    }
  } else {
    result.Success = retval
  }
  return &result, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type EchoServiceEchoArgs struct {
  Request *EchoRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewEchoServiceEchoArgs() *EchoServiceEchoArgs {
  return &EchoServiceEchoArgs{}
}

var EchoServiceEchoArgs_Request_DEFAULT *EchoRequest
func (p *EchoServiceEchoArgs) GetRequest() *EchoRequest {
  if !p.IsSetRequest() {
    return EchoServiceEchoArgs_Request_DEFAULT
  }
return p.Request
}
func (p *EchoServiceEchoArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *EchoServiceEchoArgs) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EchoServiceEchoArgs)  ReadField1(iprot thrift.Protocol) error {
  p.Request = NewEchoRequest()
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *EchoServiceEchoArgs) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("echo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EchoServiceEchoArgs) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *EchoServiceEchoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EchoServiceEchoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type EchoServiceEchoResult struct {
  Success *EchoResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *Exception `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewEchoServiceEchoResult() *EchoServiceEchoResult {
  return &EchoServiceEchoResult{}
}

var EchoServiceEchoResult_Success_DEFAULT *EchoResponse
func (p *EchoServiceEchoResult) GetSuccess() *EchoResponse {
  if !p.IsSetSuccess() {
    return EchoServiceEchoResult_Success_DEFAULT
  }
return p.Success
}
var EchoServiceEchoResult_E_DEFAULT *Exception
func (p *EchoServiceEchoResult) GetE() *Exception {
  if !p.IsSetE() {
    return EchoServiceEchoResult_E_DEFAULT
  }
return p.E
}
func (p *EchoServiceEchoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EchoServiceEchoResult) IsSetE() bool {
  return p.E != nil
}

func (p *EchoServiceEchoResult) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EchoServiceEchoResult)  ReadField0(iprot thrift.Protocol) error {
  p.Success = NewEchoResponse()
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EchoServiceEchoResult)  ReadField1(iprot thrift.Protocol) error {
  p.E = NewException()
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *EchoServiceEchoResult) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("echo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField0(oprot); err != nil { return err }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EchoServiceEchoResult) writeField0(oprot thrift.Protocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EchoServiceEchoResult) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *EchoServiceEchoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EchoServiceEchoResult(%+v)", *p)
}


